
-- ------------------------------------------------------------------           
-- Class Name    : CRPEngine
-- File Name     : CRPEngin.4gl
-- Project       : Crystal Report Writer C++ Classes for Informix-NewEra
-- Author        : Jack Suto
-- Creation Date : 01/27/96
-- Generated by  : CLIK Builder - Version 2.00.WC1
-- ------------------------------------------------------------------           
-- Comments 	
--
--
-- ------------------------------------------------------------------           
-- History
--
--
-- ------------------------------------------------------------------           

-- ------------------------------------------------------------------           
-- INCLUDE Definitions
-- ------------------------------------------------------------------           
INCLUDE "crystal.4gh"
INCLUDE "CRPEngin.4gh"

BEGIN_C
#include <print.h>
#include "..\incl\crpe.h"
END_C

-- ------------------------------------------------------------------           
-- FUNCTION CRPEngine::CRPEngine
-- ------------------------------------------------------------------           
FUNCTION CRPEngine::CRPEngine(v_open  BOOLEAN)
VARIABLE ret BOOLEAN

	LET m_engineError = 0 
	LET m_engineStatus = engineClosed
	LET m_printJobs = NEW ixVector()

	IF ( v_open = TRUE ) THEN 
		LET ret = open()
	END IF		


END FUNCTION

-- ------------------------------------------------------------------           
-- FUNCTION CRPEngine::!destroy
-- ------------------------------------------------------------------           
FUNCTION CRPEngine::!destroy()

	CALL Close()
	LET m_printJobs = NULL
	

END FUNCTION


-- ------------------------------------------------------------------           
-- FUNCTION CRPEngine::GetEngineStatus
-- ------------------------------------------------------------------           
FUNCTION CRPEngine::GetEngineStatus() RETURNING SMALLINT

RETURN m_engineStatus
END FUNCTION

-- ------------------------------------------------------------------           
-- FUNCTION CRPEngine::Open
-- ------------------------------------------------------------------           
FUNCTION CRPEngine::Open() RETURNING BOOLEAN

VARIABLE returnCode BOOLEAN

	LET returnCode = FALSE

	LET m_engineError = 0
	IF ( m_engineStatus = engineOpen ) THEN
		RETURN TRUE
	END IF

	BEGIN_C
		if ( PEOpenEngine() ) returncode = TRUE;
	END_C


	IF ( returnCode = TRUE ) THEN
		LET m_engineStatus = engineOpen
	ELSE
		LET m_engineStatus = engineClosed
	END IF
		
RETURN returnCode
END FUNCTION

-- ------------------------------------------------------------------           
-- FUNCTION CRPEngine::Close
-- ------------------------------------------------------------------           
FUNCTION CRPEngine::Close()
RETURNING  VOID

	LET m_engineError = 0

	BEGIN_C PECloseEngine(); END_C

	LET m_engineStatus = engineClosed

END FUNCTION

-- ------------------------------------------------------------------           
-- FUNCTION CRPEngine::OpenJob
-- ------------------------------------------------------------------           
FUNCTION CRPEngine::OpenJob(reportFileName CHAR(*))
RETURNING CRPEJob

VARIABLE newJob  CRPEJob,
	jobHandle SMALLINT,
	err INTEGER

	IF ( m_engineStatus != engineOpen ) THEN
		RETURN NULL
	END IF

	LET jobHandle = 0

	BEGIN_C
		jobhandle = PEOpenPrintJob( reportfilename );
	END_C

	LET newJob = NEW CRPEJob( jobHandle )	
	IF ( newJob IS NULL ) THEN
		BEGIN_C PEClosePrintJob( jobhandle ); END_C
		LET m_engineError = PEP_ERR_NOTENOUGHMEMORY
		RETURN NULL
	END IF

RETURN newJob
END FUNCTION

-- ------------------------------------------------------------------           
-- FUNCTION CRPEngine::LogOnServer
-- ------------------------------------------------------------------           
FUNCTION CRPEngine::LogOnServer(
           dllName CHAR(*),
           logOnInfo  CRPELogOnInfo )
RETURNING BOOLEAN

VARIABLE returnCode BOOLEAN,
    n1, n2, n3, n4 SMALLINT

	LET n1 = length( logOnInfo.m_serverName clipped )
	LET n2 = length( logOnInfo.m_databaseName clipped )
	LET n3 = length( logOnInfo.m_userID clipped )
	LET n4 = length( logOnInfo.m_password clipped )

BEGIN_C
{
struct PELogOnInfo log;

	strncpy( log.ServerName, logoninfo->m_servername, n1 );
	strncpy( log.DatabaseName, logoninfo->m_databasename, n2 );
	strncpy( log.UserID, logoninfo->m_userid, n3 );
	strncpy( log.Password, logoninfo->m_password, n4 );

	returncode = PELogOnServer(  dllname, &log );
}
END_C

RETURN returnCode
END FUNCTION

-- ------------------------------------------------------------------           
-- FUNCTION CRPEngine::LogOffServer
-- ------------------------------------------------------------------           
FUNCTION CRPEngine::LogOffServer(
           dllName CHAR(*),
           logOnInfo  CRPELogOnInfo )
RETURNING BOOLEAN

VARIABLE returnCode BOOLEAN,
    n1, n2, n3, n4 SMALLINT

	LET n1 = length( logOnInfo.m_serverName clipped )
	LET n2 = length( logOnInfo.m_databaseName clipped )
	LET n3 = length( logOnInfo.m_userID clipped )
	LET n4 = length( logOnInfo.m_password clipped )

BEGIN_C
{
struct PELogOnInfo log;

	strncpy( log.ServerName, logoninfo->m_servername, n1 );
	strncpy( log.DatabaseName, logoninfo->m_databasename, n2 );
	strncpy( log.UserID, logoninfo->m_userid, n3 );
	strncpy( log.Password, logoninfo->m_password, n4 );

	returncode = PELogOnServer(  dllname, &log );
}
END_C

RETURN returnCode
END FUNCTION

-- ------------------------------------------------------------------           
-- FUNCTION CRPEngine::LogOnSQLServerWithPrivateInfo
-- ------------------------------------------------------------------           
FUNCTION CRPEngine::LogOnSQLServerWithPrivateInfo(
           dllName CHAR(*),
           privateInfo  FOREIGN )
RETURNING BOOLEAN

VARIABLE returnCode BOOLEAN

BEGIN_C
   returncode = PELogOnSQLServerWithPrivateInfo( dllname, privateinfo );
END_C

RETURN returnCode
END FUNCTION

-- ------------------------------------------------------------------           
-- FUNCTION CRPEngine::PrintReport
-- ------------------------------------------------------------------           
FUNCTION CRPEngine::PrintReport(
           reportFilePath CHAR(*),
           toPrinter BOOLEAN,
           toWindow BOOLEAN,
           title CHAR(*),
           left SMALLINT,
           top SMALLINT,
           width SMALLINT,
           height SMALLINT,
           style INTEGER,
           parentWindow  ixWindow )
RETURNING SMALLINT

VARIABLE returnCode SMALLINT

	IF ( m_engineStatus != engineOpen ) THEN
		LET returnCode = PEP_ERR_ENGINENOTOPEN
	ELSE
		BEGIN_C 
		{
			HWND hWnd;
			 extern  HWND __getHWndFromixWindow( struct ixwindow *);
			 hWnd = __getHWndFromixWindow( parentwindow );
			 hWnd = GetWindow(hWnd, GW_CHILD);

			returncode = PEPrintReport( reportfilepath, toprinter, towindow,
				title, left, top, width, height, style, hWnd); 
        }
		END_C
	END IF

RETURN returnCode
END FUNCTION

-- ------------------------------------------------------------------           
-- FUNCTION CRPEngine::CanClose
-- ------------------------------------------------------------------           
FUNCTION CRPEngine::CanClose()
RETURNING BOOLEAN

VARIABLE returnCode BOOLEAN

	IF ( m_engineStatus != engineOpen ) THEN
		LEt returnCode = TRUE
	ELSE
		BEGIN_C returncode = PECanCloseEngine(); END_C
	END IF

RETURN returnCode
END FUNCTION

-- ------------------------------------------------------------------           
-- FUNCTION CRPEngine::GetVersion
-- ------------------------------------------------------------------           
FUNCTION CRPEngine::GetVersion(versionRequested SMALLINT)
RETURNING SMALLINT

VARIABLE returnCode SMALLINT

	LET m_engineError = 0

	BEGIN_C returncode = PEGetVersion( versionrequested ); END_C

RETURN returnCode
END FUNCTION

-- ------------------------------------------------------------------           
-- FUNCTION CRPEngine::GetErrorCode
-- ------------------------------------------------------------------           
FUNCTION CRPEngine::GetErrorCode()
RETURNING SMALLINT

VARIABLE returnCode SMALLINT

	IF ( m_engineError != 0 ) THEN
		LET returnCode = m_engineError
	ELSE
		BEGIN_C returncode = PEGetErrorCode(0); END_C
	END IF

RETURN returnCode
END FUNCTION

-- ------------------------------------------------------------------           
-- FUNCTION CRPEngine::GetErrorText
-- ------------------------------------------------------------------           
FUNCTION CRPEngine::GetErrorText()
RETURNING ixString

VARIABLE  errString  ixString,
	ptr CHAR(1024)

BEGIN_C
HANDLE textHandle;
short textLength;

	if( PEGetErrorText(0, &textHandle, &textLength) ) {
		PEGetHandleString( textHandle, ptr, textLength );
	}

END_C

LET errString = new ixString( ptr clipped )
RETURN errString
END FUNCTION

-- ------------------------------------------------------------------           
-- FUNCTION CRPEngine::GetNPrintJobs
-- ------------------------------------------------------------------           
FUNCTION CRPEngine::GetNPrintJobs()
RETURNING SMALLINT

RETURN m_printJobs.getCount()
END FUNCTION

-- ------------------------------------------------------------------           
-- FUNCTION CRPEngine::AddJob
-- ------------------------------------------------------------------           
FUNCTION CRPEngine::AddJob(job  CRPEJob)
RETURNING  VOID
VARIABLE pos INTEGER

	LET pos =  m_printJobs.insert( job )

RETURN
END FUNCTION

-- ------------------------------------------------------------------           
-- FUNCTION CRPEngine::RemoveJob
-- ------------------------------------------------------------------           
FUNCTION CRPEngine::RemoveJob(job  CRPEJob)
RETURNING  VOID
VARIABLE numJobs SMALLINT,
         j CRPEJob

	LET numJobs = m_printJobs.getCount()
	WHILE ( numJobs > 0 ) 
		LET j = m_printJobs.get(numJobs)
		IF ( j.isequalto( job ) ) THEN
		      LET j = m_printJobs.delete(numJobs)
			  EXIT WHILE
		END IF
		LET numJobs = numJobs - 1
	END WHILE

RETURN
END FUNCTION

-- ------------------------------------------------------------------           
-- End of file : CRPEngin.4gl
-- ------------------------------------------------------------------           
